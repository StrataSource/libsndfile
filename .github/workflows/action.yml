name: C/C++ CI

on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        name: [
          ubuntu-gcc-ossfuzz,
          ubuntu-clang-cmake-shared,
          windows-vs2022-x64-shared,
          ]
        include:
          - name: ubuntu-gcc-ossfuzz
            os: ubuntu-latest
            cc: gcc
            cxx: g++
            autotools-options: --enable-werror
            build-system: ossfuzz

          - name: ubuntu-clang-cmake-shared
            os: ubuntu-latest
            cc: clang
            cxx: clang++
            build-system: cmake
            cmake-generator: 'Ninja'
            cmake-options: >-
              -DCMAKE_BUILD_TYPE=Release
              -DBUILD_SHARED_LIBS=ON
              -DCMAKE_C_FLAGS="-Wall -Wextra"
              -DCMAKE_VERBOSE_MAKEFILE=ON

          - name: windows-vs2022-x64-shared
            os: windows-latest
            triplet: 'x64-windows-static'
            build-system: cmake
            cmake-generator: 'Visual Studio 17 2022'
            cmake-options: >-
              -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded$<$<CONFIG:Debug>:Debug>
              -DBUILD_SHARED_LIBS=ON
              -DBUILD_REGTEST=OFF
              -DBUILD_EXAMPLES=OFF
              -DINSTALL_PKGCONFIG_MODULE=OFF
              -DCMAKE_BUILD_TYPE=Release
              -DVCPKG_TARGET_TRIPLET=x64-windows-static
              -DCMAKE_TOOLCHAIN_FILE=c:/vcpkg/scripts/buildsystems/vcpkg.cmake

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Install MacOS dependencies
        if: startsWith(matrix.os,'macos')
        run: |
          brew install automake autogen speex mpg123

      - name: Install Linux dependencies
        if: startsWith(matrix.os,'ubuntu')
        run: sudo apt-get update -y && sudo apt-get install -y autogen ninja-build libogg-dev libvorbis-dev libflac-dev libopus-dev libasound2-dev libsqlite3-dev libspeex-dev libmp3lame-dev libmpg123-dev

      - name: Setup NuGet Credentials
        env:
          VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
        if: startsWith(matrix.os,'windows')
        shell: 'bash'
        run: >
          `vcpkg fetch nuget | tail -n 1`
          sources add
          -source "https://nuget.pkg.github.com/libsndfile/index.json"
          -storepasswordincleartext
          -name "GitHub"
          -username "evpobr"
          -password "${{ secrets.GITHUB_TOKEN }}"

      - name: Configure, build and test with CMake
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
          VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
        if: startsWith(matrix.build-system,'cmake')
        run: |
          mkdir build
          cd build
          cmake .. -G "${{matrix.cmake-generator}}" ${{matrix.cmake-options}}
          cmake --build . --config Release
          ctest

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        if: startsWith(matrix.name,'windows')
        with:
          name: ${{ matrix.os }}-sndfile
          path: |
            include/*
            build/Release/*.dll
            build/Release/*.lib

      - name: Configure, build and test with OSSFuzz
        env:
          CC: ${{ matrix.cc }}
          CXX: ${{ matrix.cxx }}
        if: startsWith(matrix.build-system,'ossfuzz')
        run: |
          ./ossfuzz/ci_oss.sh
